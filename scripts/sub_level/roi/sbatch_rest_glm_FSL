#!/usr/bin/env bash
#
# jmildner@princeton.edu, May 30 2017
#
# Run glm analysis with a design of nuisance regressors to get residuals for
# ROI time course extraction
################################################################################----------
# Files sourced:
#   globals.par
#   funcs
# Flags:
#  -p <pfile> : rest.par parameter file (full path or relative to scripts/roi)
#  <subjects> : list of subjects (s002 s003 s004) or keyword 'all' (default: all)
################################################################################----------
#SBATCH -J 'rest_glm'                    # Job name
#SBATCH --workdir=./                    # Set working directory
#SBATCH -o '../output/gen_reg-%j.out'   # Output file
#SBATCH --mem-per-cpu=10000
#SBATCH --mail-type=FAIL
#SBATCH -t 240                          # Run time : Default time is 24 hours
#SBATCH -p all

set -e

echo "on node: $(hostname) "

module load fsl/5.0.9
module load python/2.7
label='[RST_GLM]'


function help_func () {
cat << END
  roiRest_glm -p <pfile> <subject>
  Description:
  ------------
    Run first level GLM in FSL on a single subject for nuisance regressors.
    Create residuals: res4d.nii.gz in glm directory

  Usage:
  ------
    [-h | --help | -help]
      Display this help
    -p <pfile>
      File with parameters for this step.
    <subject>
      One subject ID

END
}
################################################################################----------
# First, check for help flag (multi-character flags not supported by getopts)
if [[ $@ =~ --help|-help ]]; then help_func; exit; fi

# Source globals
## Check if PROJECT_DIR is already known
if [[ ! -z $PROJECT_DIR ]]; then
	source "${PROJECT_DIR}/scripts/globals.par"
## check if globals is in the current directory
elif [[ -f ./globals.par ]]; then
	source globals.par
## Check if we're not inside a slurm job
elif [[ -z $SLURM_JOB_ID ]]; then
	#Get the name of the directory this script is in, to create full path to globals.par
	script_dir="$( cd "${BASH_SOURCE%/*}" ; pwd -P )"
	#Assuming the scripts dir is somewhere in the full path, this finds globals.par
	source "${script_dir%scripts/*}/scripts/globals.par"
##error out if we can't find globals with any of these strategies
else
	echo "${label} ERROR: can't find globals.par. Please source globals.par before starting."
	exit
fi

source "${SCRIPT_DIR_UTIL}/funcs"


# Parse flags
while getopts ":p:h" opt; do
	case "${opt}" in
		h)
		  help_func
			exit
		;;
		p)
		  pfile="${OPTARG}"
			if [[ -f ${SCRIPT_DIR_ROI}/${pfile} ]]; then
        echo "${label} Using parameters in ${pfile}"
        source "${SCRIPT_DIR_ROI}/${pfile}"
      elif [[ -f ${pfile} ]]; then
        source "${pfile}"
      else
        echo "${label} ERROR ${pfile} not found. Use -h for help."
      fi
		;;
		\?)
      echo "${label} ERROR: unknown flag specified: ${opt}. Use --help for help."
      exit 1
    ;;
    : ) #Catch options without arguments
      echo "${label} ERROR: ${OPTARG} requires an argument. Use --help for help."
      exit 1
    esac
done
#remove used input args
shift $((OPTIND -1))
#check if there are remaining arguments, that have not yet been processed
if [[ -z $@ ]]; then
  echo "${label} ERROR: missing subject argument. Use -h for help"
  exit 1
fi

subject="$@"
if [[ $(isSUB "${subject}") != true ]]; then
  echo "${label} ERROR: subject ${subject} does not exist"
  exit 1
fi


################################################################################
prep_dir="${prep_dir}/${subject}/rst_prep"
# create glm directory and temporary directory
glm_dir="${PROJECT_DIR}/${glm_dir}/${subject}"
mkdir -p "${glm_dir}"
tmp_rst_dir=$(mktemp -d --tmpdir rst_glm.XXXXXX)

function error() {
  ## Arguments: exit status
  ## Output: error message if necessary, clean up temp dir.
    echo "${label} ERROR: an error occurred in the analysis." \
      | tee -a ${logfile}
    echo "${label} cleaning up..." | tee -a ${logfile}
    rsync -a "${tmp_rst_dir}/" "${glm_dir}/"
    rm -rf "${tmp_rst_dir}"
  }
trap 'error' EXIT

logfile="${tmp_rst_dir}/LOG_glm.txt"
touch "${logfile}"

echo "${label} Starting glm analysis on $(date)" | tee "${logfile}"
echo "${label} Analyzing ${epi} in ${prep_dir}" | tee -a "${logfile}"
echo "${label} Using template ${template} with output dir ${glm_dir}" \
  | tee -a "${logfile}"

TR=$( read_json_value "RepetitionTime" "$(dirname ${prep_dir})/${epi%.nii*}.json" )
if [[ ${TR} =~ 'ERROR:' ]]; then
        echo -e "${TR}"
        exit 1
fi
NVOLS=$( fslnvols "${prep_dir}/${epi}" )
moco_dir="${prep_dir}/mc_${epi%.nii.gz}"

echo "${label} rendering the design template" | tee -a "${logfile}"
template="${PROJECT_DIR}/auxil/fsl_designs/templates/${template}"
# make subject design directory one level above the templates dir
sub_template_dir=$(dirname $(dirname ${template}))/${subject}
mkdir -p $sub_template_dir
cat ${template} \
	| sed "s|<<TR>>|${TR}|g" \
	| sed "s|<<NVOLS>>|$NVOLS|g" \
	| sed "s|<<hFilter>>|${hFilter}|g" \
	| sed "s|<<tempFilt>>|${tempFilt}|g" \
	| sed "s|<<tempDeriv>>|${tempDeriv}|g" \
	| sed "s|<<MOTION1>>|${moco_dir}/motion1.par|g" \
	| sed "s|<<MOTION2>>|${moco_dir}/motion2.par|g" \
	| sed "s|<<MOTION3>>|${moco_dir}/motion3.par|g" \
	| sed "s|<<MOTION4>>|${moco_dir}/motion4.par|g" \
	| sed "s|<<MOTION5>>|${moco_dir}/motion5.par|g" \
	| sed "s|<<MOTION6>>|${moco_dir}/motion6.par|g" \
	| sed "s|<<WM>>|${prep_dir}/WM_meants.txt|g" \
	| sed "s|<<CSF>>|${prep_dir}/CSF_meants.txt|g" \
  | sed "s|<<GLOBAL>>|${prep_dir}/global_meants.txt|g" \
	> ${sub_template_dir}/glm_${subject}_${glm_name}.fsf

#copy necessary files to the tmp dir
cp "${sub_template_dir}/glm_${subject}_${glm_name}.fsf" "${tmp_rst_dir}/design.fsf"
cp "${prep_dir}/${epi}" "${tmp_rst_dir}"
echo "${label} creating design matrix" | tee -a "${logfile}"

pushd "${tmp_rst_dir}" > /dev/null
feat_model design
echo "${label} starting GLM" | tee -a "${logfile}"
fsl_glm -i "${epi}" -d design.mat --out_res=res4d --demean
popd > /dev/null

rsync -a "${tmp_rst_dir}/" "${glm_dir}/"
rm -rf "${tmp_rst_dir}"
echo "${label} DONE. $(date)" | tee -a "${glm_dir}/$(basename ${logfile})"
trap - EXIT
