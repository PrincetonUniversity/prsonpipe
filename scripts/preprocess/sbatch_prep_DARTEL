#!/usr/bin/env bash
# sbatch_DARTEL_prep
#
# May 1, 2017: Miriam Weaverdyck updated script to work with new filestructure
#
# Launches preprocessing in matlab using SPM12 and DARTEL based on specified
# parameters in pfile
#
################################################################################----------
# Packages used:
#   spm12
# Modules:
#   matlab/R2016b
# Files sourced:
#   globals.par
#   funcs
#   pfile
#
# Flags:
#   [-h]		: help
#   -p 		: pfile to be sourced
#   [-l]		: logfile (full path, overrides default)
#   [-i] 	: where to look for full list of subjects (e.g. raw/TSK/)
#   [-o] 	: where to look for already-run subjects (e.g. prep/TSK/aNrNuNwNsN)
#
# Arguments (0+):
#   subs		: subjects to run
################################################################################----------
#SBATCH -J dartel_prep              # Job name
#SBATCH --workdir=./                # Working directory
#SBATCH -o DARTEL_prep-%j.out       # Output file
#SBATCH --mem-per-cpu=20480         # Amount of memory in MB (1GB = 1024 MB)
#SBATCH --mail-type=FAIL            # Type of emails to send
#SBATCH -t 2880                     # Time : Default time is 48 hours (2880 min)
#SBATCH -p all                      # DON'T CHANGE

set -e

echo "on host: $(hostname) "
label='[DARTEL]'
matlab_label='DARTEL.M'

# load matlab script
module load matlab/R2016b
[[ $(hostname | grep della) ]] && module load pigz
######################### SOURCE FILES ########################################
# Get the name of the directory this script is in to create full path to globals.par
d="$(dirname -- "$(pwd)")"
# source globals.par
source "${d%scripts*}/scripts/globals.par"
# source functions
source ${SCRIPT_DIR_UTIL}/funcs

######################### SET UP & PARSE ARGUMENTS #############################
function help_func () {
cat << END
  sbatch_prep_DARTEL [-h] -p <pfile> [-i <input_dir>] [-o <output_dir>]
                     [-l <logfile>] <subjects>
  Description:
  ------------
    Launches preprocessing in matlab using SPM12 and DARTEL based on specified
    parameters in pfile
  Usage:
  ------
    [-h | --help | -help]
      Display this help
    -p <filename>
      filename of pfile
    [-i <input_directory>]
      directory to look in for valid subjects 
      Default is raw directory
    [-o <output_directory>]
      directory to look in for already-run subjects
      Default is prep directory specified in pfile
    [-l <filename>]
      Overrides the default log file location with a different file.
      Default is LOG_spmw.txt in prep directory specified in pfile
    <subs>
      Subjects to run.
END
}
#First, check for help flag (multi-character flags not supported by getopts)
if [[ $@ =~ -h|--help|-help ]]; then help_func; exit; fi

#Parse flags other than help
while getopts "p:i:o:l:" opt; do
  case ${opt} in
    p)
      pfile=${SCRIPT_DIR_PREP}/$(basename ${OPTARG})
      if [ ! -f ${pfile} ]; then
        echo "${label} ERROR: pfile ${pfile} does not exist."
        exit 1
      fi
      echo "${label} Using pfile: ${pfile}"
      ;;
    i)
	  input_dir=${OPTARG}
      if ! $(isDIR ${input_dir}); then
        echo "${label} ERROR: input directory ${input_dir} is not a directory."
        exit 1
      fi
      input_dir=$(full_dir ${input_dir})
      echo "${label} input_dir: ${input_dir}"
      ;;
    o)
	  output_dir=${OPTARG}
      if ! $(isDIR ${output_dir}); then
        echo "${label} ERROR: output directory ${output_dir} is not a directory."
        exit 1
      fi
      output_dir=$(full_dir ${output_dir})
      echo "${label} output_dir: ${output_dir}"
      ;;
    l)
      logfile=${OPTARG}
      logdir=$(dirname ${logfile})
      if ! $(isDIR ${logdir}); then
        echo "${label} ERROR: ${logdir} is not a directory."
        exit 1
      fi
      logdir=$(full_dir ${logdir})
      logfile=${logdir}/$(basename ${logfile})
      touch ${logfile}
      echo "${label} Using logfile: ${logfile} instead of default" | tee -a ${logfile}
      ;;
    \? )
      echo "${label} ERROR: unknown flag specified: ${opt}. Use -h for help."
      exit 1
      ;;
    : ) #Catch options without arguments
      echo "${label} ERROR: -${OPTARG} requires an argument. Use -h for help."
      exit 1
    esac
done
[[ -z ${pfile} ]] && echo "$label ERROR: -p flag required. Use -h for help." && exit 1
#remove used input args
shift $((OPTIND -1))

############################## MAIN BODY OF SCRIPT #############################
# extract the wd folder location from the pfile by grabbing the quoted section 
# of the line that starts with "p.subdir /whitespace/ = " and ends before ";"
wd_dir=$(grep -oP 'p.prepdir\s*=\s\K'.*?'(?=;)' ${pfile} | tr -d \')
# get task name based on wd_dir
tsk_dir=$(dirname ${wd_dir})
tsk=${tsk_dir: -3}

# if input_dir doesn't exist, use default from pfile
[[ -z ${input_dir} ]] && input_dir="${RAW_DIR}/${tsk}/"
# if output_dir doesn't exist, use default from pfile
[[ -z ${output_dir} ]] && output_dir="${wd_dir}"
# if logfile doesn't exist, use default from pfile
[[ -z ${logfile} ]] && logfile="${wd_dir}/LOG_dartel.txt"

#check if there are remaining arguments, that have not yet been processed
# if so, get subject IDs by calling get_subs
get_subs "${input_dir}" "${output_dir}" "$@"
run_subs=( "${SUBS[@]}" )

logfile_wd="${wd_dir}/LOG.txt"

# turn SUBIDS into a matlab array of numbers (not subIDs)
matlab_array=$(make_matlab_array ${run_subs[@]})

echo "${label} $(date) Beginning DARTEL analysis of subject(s) ${matlab_array} with pfile ${pfile}" \
  | tee -a "${logfile_wd}"
# make sure matlab finds the timezone in the right format ('America/New_York' vs Linux's old 'US/Eastern')
[[ $(echo 'EDT EST') =~ $(date +"%Z") ]] && oldtz="${TZ}" && export TZ='America/New_York'
# Run the matlab script and pipe only the lines with the matlab label to the log file
matlab -nosplash -nodisplay -nodesktop \
  -r "try; matlab_prep_DARTEL(${matlab_array},'${pfile}'); catch me; \
  fprintf('%s / %s\n',me.identifier,me.message); exit(1); end; exit" \
| tee >(grep --line-buffered ${matlab_label} >> "${logfile}")
(( ${PIPESTATUS[0]} == 1 )) && exit 1
[[ -z ${oldtz} ]] && unset TZ || TZ="${oldtz}"
echo "${label} DONE. $(date)" | tee -a "${logfile_wd}"

# move current output file to output directory
bash "${SCRIPT_DIR_UTIL}/cleanup_output" "${SLURM_JOB_ID}"
